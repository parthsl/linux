Bottom: 7382b95551b6120fd5ae8117dc97c49d8d5ca972
Top:    786ac15da536d14d102be265f1727028ae87abc8
Author: Parth Shah <parth@linux.ibm.com>
Date:   2020-09-22 14:53:55 +0530

sched/fair: Fallback to pre-empted idle CPU in absence of any available_idle_cpu

select_idle_sibling finds available_idle_cpu() in LLC domain, but the
definition of available_idle_cpu() includes the CPU has nr_running=0 and
!vcpu_is_preempted(). In absence of any such available_idle_cpu, it returns
target cpu itself which is definitely not available_idle_cpu().

Hence, fallback to idle_cpu() in absence of any such available_idle_cpu(),
which better spreads the workload during task wakeup therby decreasing
latency.

This patch implicitly fixes accounting problem which was not measured when
select_idle_sibling returns -1 at nr=0.

schbench in 2 PowerPC KVM guests (88 cpus, 4 threads per core)
Baseline:
=========
$> schbench -m 66 -t 2 -r 60 -c 1000 -s 10000
Latency percentiles (usec)
        50.0000th: 48
        75.0000th: 53
        90.0000th: 61
        95.0000th: 128
        *99.0000th: 929
        99.5000th: 1026
        99.9000th: 1062
        min=0, max=2878

With patch:
==========
$> schbench -m 66 -t 2 -r 60 -c 1000 -s 10000
Latency percentiles (usec)
        50.0000th: 51
        75.0000th: 62
        90.0000th: 75
        95.0000th: 79
        *99.0000th: 91
        99.5000th: 103
        99.9000th: 169
        min=0, max=1174

Signed-off-by: Parth Shah <parth@linux.ibm.com>


---

kernel/sched/fair.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)
