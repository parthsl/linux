Bottom: 5b15f5f7f4b37aba2e62a8a857486c6e41f1375f
Top:    39423a72d2c7f69dc447162642f5a7cadd7e10b4
Author: Parth Shah <parth@linux.ibm.com>
Date:   2020-01-09 18:39:32 +0530

Refresh of sched-introduce-switch-to

---

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index e5533eecca9e..2d360796859d 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -73,6 +73,26 @@ __read_mostly int scheduler_running;
  */
 int sysctl_sched_rt_runtime = 950000;
 
+DEFINE_STATIC_KEY_FALSE(__turbo_sched_enabled);
+static DEFINE_MUTEX(turbo_sched_lock);
+static int turbo_sched_count;
+
+void turbo_sched_get(void)
+{
+	mutex_lock(&turbo_sched_lock);
+	if (!turbo_sched_count++)
+		static_branch_enable(&__turbo_sched_enabled);
+	mutex_unlock(&turbo_sched_lock);
+}
+
+void turbo_sched_put(void)
+{
+	mutex_lock(&turbo_sched_lock);
+	if (!--turbo_sched_count)
+		static_branch_disable(&__turbo_sched_enabled);
+	mutex_unlock(&turbo_sched_lock);
+}
+
 /*
  * __task_rq_lock - lock the rq @p resides on.
  */
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 0bda380d2845..7e8a5f89f2b2 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2499,3 +2499,12 @@ static inline void membarrier_switch_mm(struct rq *rq,
 #endif
 
 #define lenient_latency(lat)	((lat) == MAX_LATENCY_TOLERANCE)
+
+void turbo_sched_get(void);
+void turbo_sched_put(void);
+DECLARE_STATIC_KEY_FALSE(__turbo_sched_enabled);
+
+static inline bool is_turbosched_enabled(void)
+{
+	return static_branch_unlikely(&__turbo_sched_enabled);
+}
