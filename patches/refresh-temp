Bottom: 394f142eedc7a0a7de0a443f2e8e9248ef4251aa
Top:    07352998882094ad56f8e446112bac932e333bae
Author: Parth Shah <parth@linux.ibm.com>
Date:   2020-01-09 12:06:22 +0530

Refresh of sched-core-add-manual

---

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 014b5569d641..42b3c4c5559c 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4715,8 +4715,6 @@ static void __setscheduler_params(struct task_struct *p,
 	set_load_weight(p, true);
 
 	p->latency_tolerance = attr->sched_latency_tolerance;
-	//if (attr->sched_flags & SCHED_FLAG_TASK_PACKING)
-	//	p->flags |= PF_CAN_BE_PACKED;
 }
 
 /* Actually do priority change: must hold pi & rq lock. */
@@ -4776,8 +4774,6 @@ static int __sched_setscheduler(struct task_struct *p,
 	struct rq_flags rf;
 	int reset_on_fork;
 	int queue_flags = DEQUEUE_SAVE | DEQUEUE_MOVE | DEQUEUE_NOCLOCK;
-	unsigned long long task_packing_flag =
-				attr->sched_flags & SCHED_FLAG_TASK_PACKING;
 	struct rq *rq;
 
 	/* The pi code expects interrupts enabled */
@@ -4919,8 +4915,7 @@ static int __sched_setscheduler(struct task_struct *p,
 			goto change;
 		if (attr->sched_flags & SCHED_FLAG_LATENCY_TOLERANCE &&
 		    attr->sched_latency_tolerance != p->latency_tolerance)
-		//if (task_packing_flag)
-		//	goto change;
+			goto change;
 
 		p->sched_reset_on_fork = reset_on_fork;
 		retval = 0;
